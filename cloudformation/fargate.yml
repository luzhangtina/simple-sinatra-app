AWSTemplateFormatVersion: 2010-09-09
Description: "Deploy a service on AWS Fargate, hosted in a public subnet, and accessible via a public load balancer"
Parameters:
  VPCStackName:
    Type: String
    Description: "The name of the parent Fargate networking stack that you created. Necessary to locate and reference resources created by that stack"
  ServiceName:
    Type: String
    Description: "A name for the service"
  ImageUrl:
    Type: String
    Description: "The url of a docker image that contains the application process that will handle the traffic for this service"
  ContainerPort:
    Type: Number
    Description: "The port number which the application inside the docker container is binding to"
  ContainerCpu:
    Type: Number
    Description: "The CPU to give the container. 1024 is 1 CPU"
  ContainerMemory:
    Type: Number
    Description: "The memory in megabytes to give the container"
  DesiredCount:
    Type: Number
    Description: "The number of the service task to run"
  Role:
    Type: String
    Description: "An IAM role to give the service's containers if the code within needs to access other AWS resources like S3 buckets, DynamoDB tables, etc"
Conditions:
  HasCustomRole: !Not
    - !Equals
      - !Ref Role
      - ''
Resources:
  PublicLoadBalancerSG:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: "Access to the public facing load balancer"
        VpcId:
          Fn::ImportValue: !Sub '${VPCStackName}:VPCId'
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: 0.0.0.0/0

  PublicLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - Fn::ImportValue: !Sub '${VPCStackName}:PublicSubnetOne'
        - Fn::ImportValue: !Sub '${VPCStackName}:PublicSubnetTwo'
      SecurityGroups:
        - !Ref PublicLoadBalancerSG

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref ServiceName
      Port: !Ref ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub '${VPCStackName}:VPCId'
  PublicLoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

  ECSCluster:
    Type: 'AWS::ECS::Cluster'

  FargateContainerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: "Access to the Fargate containers"
      VpcId:
        Fn::ImportValue: !Sub '${VPCStackName}:VPCId'
  FargateContainerSecurityFromPublicALB:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: "Ingress from the public ALB"
      GroupId: !Ref FargateContainerSecurityGroup
      FromPort: !Ref ContainerPort
      IpProtocol: tcp
      ToPort: !Ref ContainerPort
      SourceSecurityGroupId: !Ref PublicLoadBalancerSG

  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: "AmazonECSTaskExecutionRolePolicy"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Ref ServiceName
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !If
        - HasCustomRole
        - !Ref Role
        - !Ref 'AWS::NoValue'
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Ref ImageUrl
          PortMappings:
            - ContainerPort: !Ref ContainerPort
  Service:
    Type: 'AWS::ECS::Service'
    DependsOn: PublicLoadBalancerListener
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref FargateContainerSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub '${VPCStackName}:PublicSubnetOne'
            - Fn::ImportValue: !Sub '${VPCStackName}:PublicSubnetTwo'
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  ECSAutoScalingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "application-autoscaling.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: "ecs-service-auto-scaling"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: "*"

Outputs:
  DNS:
    Value: !GetAtt PublicLoadBalancer.DNSName