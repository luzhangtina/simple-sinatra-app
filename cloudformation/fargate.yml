AWSTemplateFormatVersion: 2010-09-09
Description: "Deploy a service on AWS Fargate, hosted in a public subnet, and accessible via a public load balancer"
Parameters:
  VPCStackName:
    Type: String
    Description: "The name of the parent Fargate networking stack that you created. Necessary to locate and reference resources created by that stack"
  ServiceName:
    Type: String
    Description: "A name for the service"
  ImageUrl:
    Type: String
    Description: "The url of a docker image that contains the application process that will handle the traffic for this service"
  ContainerPort:
    Type: Number
    Description: "What port number the application inside the docker container is binding to?"
  ContainerCpu:
    Type: Number
    Description: "How much CPU to give the container. 1024 is 1 CPU"
  ContainerMemory:
    Type: Number
    Description: "How much memory in megabytes to give the container?"
  ALBPath:
    Type: String
    Description: "A path on the public load balancer that this service should be connected to. Use * to send all load balancer traffic to this service"
  Priority:
    Type: Number
    Description: "The priority for the routing rule added to the load balancer. This only applies if your have multiple services which have been assigned to different paths on the load balancer."
  DesiredCount:
    Type: Number
    Description: "How many copies of the service task to run"
  Role:
    Type: String
    Description: "(Optional) An IAM role to give the service's containers if the code within needs to access other AWS resources like S3 buckets, DynamoDB tables, etc"
Conditions:
  HasCustomRole: !Not
    - !Equals
      - !Ref Role
      - ''
Resources:
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
  FargateContainerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId:
        Fn::ImportValue: !Sub '${VPCStackName}:VPCId'
  PublicLoadBalancerSG:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Access to the public facing load balancer
        VpcId:
          Fn::ImportValue: !Sub '${VPCStackName}:VPCId'
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
  EcsSecurityGroupIngressFromPublicALB:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref PublicLoadBalancerSG
  EcsSecurityGroupIngressFromSelf:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref FargateContainerSecurityGroup
  PublicLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - !ImportValue
            'Fn::Join':
              - ':'
              - - !Ref VPCStackName
                - PublicSubnetOne
        - !ImportValue
            'Fn::Join':
              - ':'
              - - !Ref VPCStackName
                - PublicSubnetTwo
      SecurityGroups:
        - !Ref PublicLoadBalancerSG
  DummyTargetGroupPublic:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Ref 'AWS::StackName'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue
        'Fn::Join':
          - ':'
          - - !Ref VPCStackName
            - VPCId
  PublicLoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref DummyTargetGroupPublic
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP
  ECSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'
  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Ref ServiceName
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !If
        - HasCustomRole
        - !Ref Role
        - !Ref 'AWS::NoValue'
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Ref ImageUrl
          PortMappings:
            - ContainerPort: !Ref ContainerPort
  LoadBalancerRule:
      Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
      Properties:
        Actions:
          - TargetGroupArn: !Ref TargetGroup
            Type: forward
        Conditions:
          - Field: path-pattern
            Values:
              - !Ref ALBPath
        ListenerArn: !Ref PublicLoadBalancerListener
        Priority: !Ref Priority
  TargetGroup:
      Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
      Properties:
        HealthCheckIntervalSeconds: 6
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        TargetType: ip
        Name: !Ref ServiceName
        Port: !Ref ContainerPort
        Protocol: HTTP
        UnhealthyThresholdCount: 2
        VpcId: !ImportValue
          'Fn::Join':
            - ':'
            - - !Ref VPCStackName
              - VPCId
  Service:
    Type: 'AWS::ECS::Service'
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref FargateContainerSecurityGroup
          Subnets:
            - !ImportValue
              'Fn::Join':
                - ':'
                - - !Ref VPCStackName
                  - PublicSubnetOne
            - !ImportValue
              'Fn::Join':
                - ':'
                - - !Ref VPCStackName
                  - PublicSubnetTwo
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

Outputs:
  DNS:
    Value: !GetAtt PublicLoadBalancer.DNSName